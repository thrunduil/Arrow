#ifndef INC_arrow_vocabularyTokenTypes_hpp_
#define INC_arrow_vocabularyTokenTypes_hpp_

/* $ANTLR 2.7.7 (2006-11-01): "arrow.g" -> "arrow_vocabularyTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API arrow_vocabularyTokenTypes {
#endif
	enum {
		EOF_ = 1,
		TOK_semi = 4,
		TOK_module = 5,
		TOK_import = 6,
		TOK_as = 7,
		TOK_val = 8,
		TOK_overload = 9,
		TOK_equal = 10,
		TOK_extern = 11,
		TOK_lbracket = 12,
		TOK_comma = 13,
		TOK_rbracket = 14,
		TOK_colon = 15,
		TOK_double_arrow = 16,
		TOK_type = 17,
		TOK_operator_declaration = 18,
		TOK_lcurly = 19,
		TOK_rcurly = 20,
		TOK_integer = 21,
		TOK_dcolon = 22,
		TOK_arrow = 23,
		TOK_plus = 24,
		TOK_minus = 25,
		TOK_lparen = 26,
		TOK_rparen = 27,
		TOK_kind = 28,
		TOK_type_int = 29,
		TOK_type_bool = 30,
		TOK_type_char = 31,
		TOK_type_string = 32,
		TOK_star = 33,
		TOK_all = 34,
		TOK_some = 35,
		TOK_rref = 36,
		TOK_type_float = 37,
		TOK_Record = 38,
		TOK_Variant = 39,
		TOK_list = 40,
		TOK_dot = 41,
		TOK_operator = 42,
		TOK_langle = 43,
		TOK_dot_langle = 44,
		TOK_rangle = 45,
		TOK_Fun = 46,
		TOK_Rec = 47,
		TOK_If = 48,
		TOK_Then = 49,
		TOK_Else = 50,
		TOK_underscore = 51,
		TOK_if = 52,
		TOK_then = 53,
		TOK_else = 54,
		TOK_case = 55,
		TOK_in = 56,
		TOK_open = 57,
		TOK_let = 58,
		TOK_fun = 59,
		TOK_rec = 60,
		TOK_ref = 61,
		TOK_deref = 62,
		TOK_record = 63,
		TOK_variant = 64,
		TOK_identifier = 65,
		TOK_string = 66,
		TOK_bracket_dolar = 67,
		TOK_bracket_assign_dolar = 68,
		TOK_dot_bracket_dolar = 69,
		TOK_dot_bracket_assign_dolar = 70,
		TOK_opening_bracket = 71,
		TOK_closing_bracket = 72,
		TOK_char = 73,
		LITERAL_true = 74,
		LITERAL_false = 75,
		TOK_number = 76,
		Any = 77,
		UTF8_lead_byte = 78,
		UTF8_next_byte = 79,
		UTF8_multibyte_char = 80,
		UTF8_not_line_break = 81,
		UTF8_bom = 82,
		Shebang = 83,
		White_space = 84,
		Line_break = 85,
		Comment = 86,
		Line_comment = 87,
		Block_comment = 88,
		Double_quoted_string = 89,
		Wysiwyg_string = 90,
		Escape_sequence = 91,
		Escaped_char = 92,
		Dec_integer_literal = 93,
		Bin_integer_literal = 94,
		Oct_integer_literal = 95,
		Hex_integer_literal = 96,
		Dec_integer = 97,
		Dec_digit = 98,
		Bin_prefix = 99,
		Bin_integer = 100,
		Bin_digit = 101,
		Oct_prefix = 102,
		Oct_integer = 103,
		Oct_digit = 104,
		Hex_prefix = 105,
		Hex_integer = 106,
		Hex_digit = 107,
		Dec_floating_literal = 108,
		Hex_floating_literal = 109,
		Dec_exponent = 110,
		Hex_exponent = 111,
		String_literal = 112,
		Character_literal = 113,
		Identifier = 114,
		Identifier_start = 115,
		Block_comment_content = 116,
		Identifier_ascii = 117,
		Identifier_ascii_start = 118,
		Operator_ascii_char = 119,
		Operator = 120,
		Operator_char = 121,
		Predefined_operator = 122,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_arrow_vocabularyTokenTypes_hpp_*/
